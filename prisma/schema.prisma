// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id          Int       @id @default(autoincrement())
  username    String    @unique
  password    String
  email       String    @unique
  isSuper     Boolean   @default(false)  // 是否是超级管理员
  status      Int       @default(1)      // 用户状态：1-正常，0-禁用，-1-删除
  type        String    @default("user") // 用户类型：admin-管理员，user-普通用户
  roles       Role[]    
  // 自引用关系，用于表示用户层级
  parent      User?     @relation("UserHierarchy", fields: [parentId], references: [id])
  parentId    Int?
  children    User[]    @relation("UserHierarchy")
  // 操作记录
  operations  OperationLog[]
  // 用户元数据
  profile     UserProfile?
  // 审计字段
  createdBy   Int?      // 创建人ID
  updatedBy   Int?      // 更新人ID
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? // 软删除
}

// 用户详细信息模型
model UserProfile {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  user        User      @relation(fields: [userId], references: [id])
  realName    String?   // 真实姓名
  phone       String?   @unique // 电话
  avatar      String?   // 头像
  company     String?   // 公司名称
  department  String?   // 部门
  position    String?   // 职位
  remark      String?   // 备注
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// 角色模型
model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  code        String       @unique // 角色标识符
  description String?      // 角色描述
  status      Int          @default(1) // 状态：1-启用，0-禁用
  users       User[]   
  permissions Permission[]
  createdBy   Int?         // 创建人ID
  updatedBy   Int?         // 更新人ID
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// 权限模型
model Permission {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  code        String      @unique // 权限唯一标识符
  type        String      // 权限类型：'menu'（菜单）, 'page'（页面）, 'button'（按钮）等
  path        String?     // 页面路径
  component   String?     // 前端组件路径
  icon        String?     // 图标
  sort        Int         @default(0) // 排序
  hidden      Boolean     @default(false) // 是否在菜单中隐藏
  disabled    Boolean     @default(false) // 是否禁用
  description String?     // 权限描述
  roles       Role[]   
  // 自引用关系，用于表示树形结构
  parent      Permission? @relation("PermissionHierarchy", fields: [parentId], references: [id])
  parentId    Int?
  children    Permission[] @relation("PermissionHierarchy")
  createdBy   Int?        // 创建人ID
  updatedBy   Int?        // 更新人ID
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// 操作日志模型
model OperationLog {
  id          Int      @id @default(autoincrement())
  userId      Int      // 操作人ID
  user        User     @relation(fields: [userId], references: [id])
  module      String   // 操作模块
  action      String   // 操作类型：create, update, delete, query
  description String   // 操作描述
  ip          String?  // 操作IP
  userAgent   String?  // 用户代理
  requestUrl  String?  // 请求URL
  method      String?  // 请求方法
  params      String?  @db.Text // 请求参数
  result      String?  @db.Text // 操作结果
  status      Int      // 操作状态：1-成功，0-失败
  createdAt   DateTime @default(now())
}

// 验证码模型
model VerificationCode {
  id          Int      @id @default(autoincrement())
  email       String   // 邮箱
  code        String   // 验证码
  type        String   // 验证码类型：register-注册，reset-重置密码
  expiredAt   DateTime // 过期时间
  used        Boolean  @default(false) // 是否已使用
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

